#include <stdlib.h>
#include <assert.h>
#include <stdbool.h>
#include "pqueue.h"

struct s_pqueue
{
    /* COMPLETAR */
    struct s_node *cola;
    unsigned int size;
    priority_t minPriority;
};

struct s_node
{
    /* COMPLETAR */
    pqueue_elem paciente;
    priority_t priority;
    struct s_node *next;
};

static struct s_node *create_node(pqueue_elem e)
{
    struct s_node *new_node = NULL;
    
    /* COMPLETAR */

    new_node = malloc(sizeof(struct s_node));
    new_node->next = NULL;
    new_node->paciente = e;
    new_node->priority = 0;
    
    return new_node;
}

static struct s_node *destroy_node(struct s_node *node)
{
    /* COMPLETAR */
    assert(node != NULL);
    node->next = NULL;
    free(node);
    node = NULL;
    assert(node == NULL);
    return node;
}

static bool invrep(pqueue q)
{
    return q != NULL;
}

pqueue pqueue_empty(priority_t min_priority)
{
    pqueue q = NULL;
    /*
     * COMPLETAR
     *
     */
    q = malloc(sizeof (struct s_pqueue));
    q->cola = NULL;
    q->size = 0;
    q->minPriority = min_priority;
    
    assert(invrep(q) && pqueue_is_empty(q));
    return q;
}

pqueue pqueue_enqueue(pqueue q, pqueue_elem e, priority_t priority)
{
    assert(invrep(q));
    /*
     * COMPLETAR
     *
     */
    struct s_node *newNode = create_node(e);
    newNode->priority = priority;
    newNode->next = NULL;

    if (q->cola == NULL || q->cola->priority > newNode->priority)
    {
        newNode->next = q->cola;
        q->cola = newNode;
    }
    else
    {
        struct s_node *aux = q->cola;
        while (aux->next != NULL && (aux->next->priority <= newNode->priority))
        {
            aux = aux->next;
        }
        newNode->next = aux->next;
        aux->next = newNode;
    }

    q->size++;
    assert(invrep(q) && !pqueue_is_empty(q));
    return q;
}

bool pqueue_is_empty(pqueue q)
{
    assert(invrep(q));
    // return true; // BORRAR ESTA LINEA
    return q->size == 0;
}

pqueue_elem pqueue_peek(pqueue q)
{
    assert(invrep(q) && !pqueue_is_empty(q));
    // return true; // BORRAR ESTA LINEA
    return q->cola->paciente;
}

priority_t pqueue_peek_priority(pqueue q)
{
    assert(invrep(q) && !pqueue_is_empty(q));
    // return true; // BORRAR ESTA LINEA
    return q->cola->priority;
}

size_t pqueue_size(pqueue q)
{
    assert(invrep(q));
    // return 0u; // BORRAR ESTA LINEA
    unsigned int length = q->size;
    return length;
}

pqueue pqueue_dequeue(pqueue q)
{
    assert(invrep(q) && !pqueue_is_empty(q));
    /* COMPLETAR */
    struct s_node *killme = q->cola;
    q->cola = q->cola->next;
    killme = destroy_node(killme);
    
    q->size--;
    assert(invrep(q));
    return q;
}

pqueue pqueue_destroy(pqueue q)
{
    assert(invrep(q));
    /* COMPLETAR*/
    if (pqueue_is_empty(q))
    {
        return NULL;
    }
    else
    {   
        while (q->cola != NULL)
        {
            q = pqueue_dequeue(q);
        }
        
    }
    free(q);
    q = NULL;
    return q;
}